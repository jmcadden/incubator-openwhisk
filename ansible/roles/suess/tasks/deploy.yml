# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements; and to You under the Apache License, Version 2.0.
---
# This role installs seuss invokers.

- name: prepare seuss invoker env
  set_fact:
    env:
      "PORT": 8080
      "KAFKA_HOSTS": "{{ kafka_connect_string }}"
      "CONFIG_whisk_kafka_replicationFactor": "{{ kafka.replicationFactor | default() }}"
#      "CONFIG_whisk_kafka_topics_invoker_retentionBytes": "{{ kafka_topics_invoker_retentionBytes | default() }}"
#      "CONFIG_whisk_kafka_topics_invoker_retentionMs": "{{ kafka_topics_invoker_retentionMS | default() }}"
#      "CONFIG_whisk_kakfa_topics_invoker_segmentBytes": "{{ kafka_topics_invoker_segmentBytes | default() }}"
#      "CONFIG_whisk_kafka_common_securityProtocol": "{{ kafka.protocol }}"
#      "CONFIG_whisk_kafka_common_sslTruststoreLocation": "/conf/{{ kafka.ssl.keystore.name }}"
#      "CONFIG_whisk_kafka_common_sslTruststorePassword": "{{ kafka.ssl.keystore.password }}"
#      "CONFIG_whisk_kafka_common_sslKeystoreLocation": "/conf/{{ kafka.ssl.keystore.name }}"
#      "CONFIG_whisk_kafka_common_sslKeystorePassword": "{{ kafka.ssl.keystore.password }}"
#      "CONFIG_whisk_userEvents_enabled": "{{ user_events }}"
#      "ZOOKEEPER_HOSTS": "{{ zookeeper_connect_string }}"
#      "CONFIG_whisk_couchdb_protocol": "{{ db_protocol }}"
#      "CONFIG_whisk_couchdb_host": "{{ db_host }}"
#      "CONFIG_whisk_couchdb_port": "{{ db_port }}"
#      "CONFIG_whisk_couchdb_username": "{{ db_username }}"
#      "CONFIG_whisk_couchdb_password": "{{ db_password }}"
#      "CONFIG_whisk_couchdb_provider": "{{ db_provider }}"
#      "CONFIG_whisk_couchdb_databases_WhiskAuth": "{{ db.whisk.auth }}"
#      "CONFIG_whisk_couchdb_databases_WhiskEntity": "{{ db.whisk.actions }}"
#      "CONFIG_whisk_couchdb_databases_WhiskActivation": "{{ db.whisk.activations }}"
#      "DB_WHISK_ACTIONS": "{{ db.whisk.actions }}"
#      "DB_WHISK_ACTIVATIONS": "{{ db.whisk.activations }}"
#      "DB_WHISK_AUTHS": "{{ db.whisk.auth }}"
#      "CONFIG_whisk_db_actionsDdoc": "{{ db_whisk_actions_ddoc | default() }}"
#      "CONFIG_whisk_db_activationsDdoc": "{{ db_whisk_activations_ddoc | default() }}"
#      "CONFIG_whisk_db_activationsFilterDdoc": "{{ db_whisk_activations_filter_ddoc | default() }}"
#      "WHISK_API_HOST_PROTO": "{{ whisk_api_host_proto | default('https') }}"
#      "WHISK_API_HOST_PORT": "{{ whisk_api_host_port | default('443') }}"
#      "WHISK_API_HOST_NAME": "{{ whisk_api_host_name | default(groups['edge'] | first) }}"
#      "RUNTIMES_MANIFEST": "{{ runtimesManifest | to_json }}"
#      "CONFIG_whisk_runtimes_defaultImagePrefix": "{{ runtimes_default_image_prefix | default() }}"
#      "CONFIG_whisk_runtimes_defaultImageTag": "{{ runtimes_default_image_tag | default() }}"
#      "CONFIG_whisk_runtimes_bypassPullForLocalImages": "{{ runtimes_bypass_pull_for_local_images | default() }}"
#      "CONFIG_whisk_runtimes_localImagePrefix": "{{ runtimes_local_image_prefix | default() }}"
#      "DOCKER_REGISTRY": "{{ docker_registry }}"
#      "DOCKER_IMAGE_PREFIX": "{{ docker.image.prefix }}"
#      "DOCKER_IMAGE_TAG": "{{ docker.image.tag }}"
#      "CONFIG_whisk_containerFactory_containerArgs_network": "{{ invoker_container_network_name | default('bridge') }}"
#      "INVOKER_CONTAINER_POLICY": "{{ invoker_container_policy_name | default()}}"
#      "CONFIG_whisk_containerPool_numCore": "{{ invoker.numcore }}"
#      "CONFIG_whisk_containerPool_coreShare": "{{ invoker.coreshare }}"
#      "CONFIG_whisk_docker_containerFactory_useRunc": "{{ invoker.useRunc }}"
#      "INVOKER_NAME": "{{ groups['invokers'].index(inventory_hostname) }}"
#      "WHISK_LOGS_DIR": "{{ whisk_logs_dir }}"
#      "CONFIG_logback_log_level": "{{ invoker.loglevel }}"
#      "CONFIG_whisk_memory_min": "{{ limit_action_memory_min | default() }}"
#      "CONFIG_whisk_memory_max": "{{ limit_action_memory_max | default() }}"
#      "CONFIG_whisk_memory_std": "{{ limit_action_memory_std | default() }}"
#      "CONFIG_whisk_timeLimit_min": "{{ limit_action_time_min | default() }}"
#      "CONFIG_whisk_timeLimit_max": "{{ limit_action_time_max | default() }}"
#      "CONFIG_whisk_timeLimit_std": "{{ limit_action_time_std | default() }}"
#      "CONFIG_whisk_activation_payload_max": "{{ limit_activation_payload | default() }}"
#      "CONFIG_whisk_transactions_header": "{{ transactions.header }}"

- name: Start suess invoker
  shell: "echo START SUESS"

#- name: start invoker using docker cli
#  docker_container:
#    userns_mode: "host"
#    pid_mode: "host"
#    privileged: "yes"
#    name: invoker{{ groups['invokers'].index(inventory_hostname) }}
#    hostname: "invoker{{ groups['invokers'].index(inventory_hostname) }}"
#    restart_policy: "{{ docker.restart.policy }}"
#    image: "{{ docker_registry }}{{ docker.image.prefix }}/invoker:{{ docker.image.tag }}"
#    state: started
#    recreate: true
#    env: "{{ env }}"
#    volumes: "{{ volumes }}"
#    ports: "{{ ports_to_expose }}"
#    command: /bin/sh -c "exec /init.sh {{ groups['invokers'].index(inventory_hostname) }} >> /logs/invoker{{ groups['invokers'].index(inventory_hostname) }}_logs.log 2>&1"
#- name: wait until Invoker is up and running
#  uri:
#    url: "http://{{ ansible_host }}:{{ invoker.port + groups['invokers'].index(inventory_hostname) }}/ping"
#  register: result
#  until: result.status == 200
#  retries: 12
#  delay: 5
